; $VER: Install-AmigaGPT 2.3.0 (10.03.2025)

(onerror (CLEANUP))

;------------------------------------------------------------------------
(set @app-name "AmigaGPT")
(set @default-dest "SYS:")

(set #installer-ver (/ @installer-version 65536))
(set #propchoices (if (< #installer-ver 42) "" "\x1b[2p"))
(set #cpu (database "cpu") )
(set #fpu (database "fpu") )
(set #osver (/ (getversion "exec.library" (resident)) 65536))
(set #arosver ( / (getversion "aros.library" (resident)) 65536))
(set #os4 0)
(set #mos 0)

; Detect CPU type
(if (and (<> #cpu "68000") (<> #cpu "68010") )
  (set #cpu-install 1) )
(if (and (<> "NOFPU" #fpu) (= #cpu-install 1) )
  (set #cpu-install 2) )
(if (and (<> "NOFPU" #fpu) (= "68040" #cpu) )
  (set #cpu-install 3) )
(if (exists "libs:68060.library")
  (set #cpu-install 4) )

; Detect OS type
(if (<> (getversion "MorphOS" (resident)) 0)
  ( (set #mos 1)
    (set #cpu-install 4) )
  (if (>= #osver 52)
    ( (set #os4 1)
      (set #cpu-install 2) ) ) )

(if (and #os4 (= #installer-ver 53) )
  (set #installer-ver 43) ) ; Workaround for broken Installer 53.1-53.7

(set #muidir (if (= #mos 1) "SYS:Classes/MUI" "MUI:Libs/MUI") )

; Get AmigaGPT version
(set #app-version (getversion "AmigaGPT/AmigaGPT_OS3") )
(set #app-vernum (/ #app-version 65536 ) )
(set #app-revnum (- #app-version (* #app-vernum 65536 ) ) )

; Get user language
(if (= (exists "ENV:Language") 1)
  (set @language (getenv "Language") ) )

; Text strings
(set #welcome 
    ("Welcome to the %s installer!\nThis will install %s %ld.%ld on your system.\n\nAmigaGPT is a versatile ChatGPT client for Amiga systems that brings the capabilities of OpenAI's GPT to your Amiga." @app-name @app-name #app-vernum #app-revnum)
)

(set #wrongversion
(cat "You have an old version of the program 'Installer' "
     "on your Amiga!\n\nThe installation procedure needs at least Installer 42.9.\n\n"
     "Please check your configuration!")
)

(set #destdir-prompt "Please select the drawer where %s should be installed.\n")
(set #destdir-help "Typically, 'Work:' is selected as destination.")
(set #amigagptdestdir-prompt ("Please select the drawer where %s should be installed. A new drawer \"%s\" will be created.\n" @app-name @app-name))
(set #amigagptdestdir-help "Typically, 'Work:' is selected as destination.")

(set #localedir-info  "locale catalogs")
(set #installing "Installing %s...")
(set #no-diskspace "To install AmigaGPT into '%s', you need at least %ld bytes of free harddrive space!")
(set #startup-prompt "Some lines need to be added to S:User-Startup for %s:\n\n%s")
(set #startup-help "AmigaGPT won't work correctly without these lines!")
(set #os-selection-prompt "Please select which version of AmigaGPT you want to install:")
(set #os-selection-help "Choose the version that matches your Amiga system.")
(set #languages-prompt "Please select which languages you want to install:")
(set #languages-help "Choose the languages you want to use with AmigaGPT.")

;------------------------------------------------------------------------
; Cleanup any temporary mess we created
(procedure CLEANUP
    (delete (tackon @default-dest ".tempinstall") (all) (optional "force"))
) ; CLEANUP

;------------------------------------------------------------------------
; Obtain an installation path
(procedure GETPATH #gp_envname #gp_default #gp_remdir #gp_msg #gp_help
    (set #gp_res "")
    (while (= "" #gp_res)
        (set #gp_res #gp_default)
        (if (not (exists #gp_res (noreq)))
          (
            (if (= #gp_res "Work:")
              (
                (set #gp_res "")
                (set #gp_default @default-dest)
              )
            ) ; if

            (if (<> "" #gp_envname)
              (
                (set #gp_res (getenv (cat "AmigaGPT/Path_" #gp_envname)))
                (if (AND (<> "" #gp_res) #gp_remdir)
                  (
                    (set #gp_res (pathonly #gp_res))
                  )
                ) ; if
              )
              (
                (set #gp_res "")
              )
            ) ; if
          )
        ) ; if

        (if (OR (= "" #gp_res) (= @user-level 2))
          (
            (set #gp_res
                (expandpath
                    (askdir
                        (prompt #gp_msg)
                        (help #gp_help)
                        (default #gp_default)
                    )
                )
            )
          )
        ) ; if

        ; If the directory does not exist, retry!
        (if (<> "" #gp_res)
          (
            (if (not (exists #gp_res (noreq)))
                (set #gp_res "")
            ) ; if
          )
        ) ; if
    ) ; while

    ; return the result!
    (set #gp_res #gp_res)
) ; GETPATH

;------------------------------------------------------------------------
; Helper functions for language names
;------------------------------------------------------------------------

(procedure get-os3-lang #index
  (if (= #index 0) (set @result "english") (
  if (= #index 1) (set @result "bosanksi") (
  if (= #index 2) (set @result "català") (
  if (= #index 3) (set @result "czech") (
  if (= #index 4) (set @result "dansk") (
  if (= #index 5) (set @result "deutsch") (
  if (= #index 6) (set @result "english_british") (
  if (= #index 7) (set @result "español") (
  if (= #index 8) (set @result "français") (
  if (= #index 9) (set @result "greek") (
  if (= #index 10) (set @result "hrvatski") (
  if (= #index 11) (set @result "italiano") (
  if (= #index 12) (set @result "magyar") (
  if (= #index 13) (set @result "nederlands") (
  if (= #index 14) (set @result "norsk") (
  if (= #index 15) (set @result "polski") (
  if (= #index 16) (set @result "português") (
  if (= #index 17) (set @result "português-brazil") (
  if (= #index 18) (set @result "russian") (
  if (= #index 19) (set @result "sloven?ina") (
  if (= #index 20) (set @result "slovensko") (
  if (= #index 21) (set @result "srpski") (
  if (= #index 22) (set @result "suomi") (
  if (= #index 23) (set @result "svenska") (
  if (= #index 24) (set @result "türkçe") (
  (set @result "unknown")
  ))))))))))))))))))))))))))
  )

(procedure get-os4-lang #index
  (if (= #index 0) (set @result "english") (
  if (= #index 1) (set @result "bosnian") (
  if (= #index 2) (set @result "catalan") (
  if (= #index 3) (set @result "czech") (
  if (= #index 4) (set @result "danish") (
  if (= #index 5) (set @result "german") (
  if (= #index 6) (set @result "english_british") (
  if (= #index 7) (set @result "spanish") (
  if (= #index 8) (set @result "french") (
  if (= #index 9) (set @result "greek") (
  if (= #index 10) (set @result "croatian") (
  if (= #index 11) (set @result "italian") (
  if (= #index 12) (set @result "hungarian") (
  if (= #index 13) (set @result "dutch") (
  if (= #index 14) (set @result "norwegian") (
  if (= #index 15) (set @result "polish") (
  if (= #index 16) (set @result "portuguese") (
  if (= #index 17) (set @result "portuguese-brazil") (
  if (= #index 18) (set @result "russian") (
  if (= #index 19) (set @result "slovak") (
  if (= #index 20) (set @result "slovenian") (
  if (= #index 21) (set @result "serbian") (
  if (= #index 22) (set @result "finnish") (
  if (= #index 23) (set @result "swedish") (
  if (= #index 24) (set @result "turkish") (
  (set @result "unknown")
  ))))))))))))))))))))))))))
)

; Set the total number of languages
(set #languages-count 25)

;------------------------------------------------------------------------
; Catalog installation procedures
;------------------------------------------------------------------------

(procedure p_copy-catalog
  (if (in #languages #catalog)
    ( 
      (get-os3-lang #catalog)
      (set #lang-os3 @result)
      (get-os4-lang #catalog)
      (set #lang-os4 @result)
      
      (set #dest-lang (tackon (tackon #localedir "Catalogs") (if #os4 #lang-os4 #lang-os3) ) )
      (if (not (exists #dest-lang) ) (makedir #dest-lang) )
      (set #source (tackon "catalogs" #lang-os4) )
      (if (and (and (< #cpu-install 5) (or (>= #osver 46) (>= #arosver 40) ) ) (exists (tackon #source "iso") ) )
        (set #source (tackon #source "iso") ) )
      (copyfiles
        (source #source)
        (dest #dest-lang)
        (pattern "#?.catalog")
        (files) ) 
    ) 
  )
)

(procedure p_install-catalogs
  (set #avail-lang 1) ; English (built-in)
  (foreach "catalogs" "#?"
    (set #i 0)
    (while (< #i #languages-count)
      (get-os4-lang #i)
      (if (= @each-name @result)
        (
          (set #avail-lang (bitor #avail-lang (shiftleft 1 #i)))
          (set #i #languages-count) ; Exit the loop
        )
        (set #i (+ #i 1))
      )
    )
  )

  (set #default-lang 1) ; English
  (set #i 0)
  (while (< #i #languages-count)
    (get-os3-lang #i)
    (if (= @language @result)
      (
        (if (in #avail-lang #i)
          (set #default-lang (bitor #default-lang (shiftleft 1 #i)))
        )
        (set #i #languages-count) ; Exit the loop
      )
      (set #i (+ #i 1))
    )
  )

  (if (< #installer-ver 42)
    (set #nolang-fmt "(%s)")
    (set #nolang-fmt "") )
  ; Now use the individual choice variables
  (set #languages
    (askoptions
      (prompt #languages-prompt)
      (help #languages-help)
      (choices
          (cat #propchoices "English (built-in)")
	        ((set #i 1)(if (in #avail-lang #i) ("%s (%s)" (get-os4-lang #i) (get-os3-lang #i)) (#nolang-fmt @result)))
          ((set #i 2)(if (in #avail-lang #i) ("%s (%s)" (get-os4-lang #i) (get-os3-lang #i)) (#nolang-fmt @result)))
          ((set #i 3)(if (in #avail-lang #i) ("%s (%s)" (get-os4-lang #i) (get-os3-lang #i)) (#nolang-fmt @result)))
          ((set #i 4)(if (in #avail-lang #i) ("%s (%s)" (get-os4-lang #i) (get-os3-lang #i)) (#nolang-fmt @result)))
          ((set #i 5)(if (in #avail-lang #i) ("%s (%s)" (get-os4-lang #i) (get-os3-lang #i)) (#nolang-fmt @result)))
          ((set #i 6)(if (in #avail-lang #i) ("%s (%s)" (get-os4-lang #i) (get-os3-lang #i)) (#nolang-fmt @result)))
          ((set #i 7)(if (in #avail-lang #i) ("%s (%s)" (get-os4-lang #i) (get-os3-lang #i)) (#nolang-fmt @result)))
          ((set #i 8)(if (in #avail-lang #i) ("%s (%s)" (get-os4-lang #i) (get-os3-lang #i)) (#nolang-fmt @result)))
          ((set #i 9)(if (in #avail-lang #i) ("%s (%s)" (get-os4-lang #i) (get-os3-lang #i)) (#nolang-fmt @result)))
          ((set #i 10)(if (in #avail-lang #i) ("%s (%s)" (get-os4-lang #i) (get-os3-lang #i)) (#nolang-fmt @result)))
          ((set #i 11)(if (in #avail-lang #i) ("%s (%s)" (get-os4-lang #i) (get-os3-lang #i)) (#nolang-fmt @result)))
          ((set #i 12)(if (in #avail-lang #i) ("%s (%s)" (get-os4-lang #i) (get-os3-lang #i)) (#nolang-fmt @result))) 
          ((set #i 13)(if (in #avail-lang #i) ("%s (%s)" (get-os4-lang #i) (get-os3-lang #i)) (#nolang-fmt @result)))
          ((set #i 14)(if (in #avail-lang #i) ("%s (%s)" (get-os4-lang #i) (get-os3-lang #i)) (#nolang-fmt @result)))
          ((set #i 15)(if (in #avail-lang #i) ("%s (%s)" (get-os4-lang #i) (get-os3-lang #i)) (#nolang-fmt @result)))
          ((set #i 16)(if (in #avail-lang #i) ("%s (%s)" (get-os4-lang #i) (get-os3-lang #i)) (#nolang-fmt @result)))
          ((set #i 17)(if (in #avail-lang #i) ("%s (%s)" (get-os4-lang #i) (get-os3-lang #i)) (#nolang-fmt @result)))
          ((set #i 18)(if (in #avail-lang #i) ("%s (%s)" (get-os4-lang #i) (get-os3-lang #i)) (#nolang-fmt @result)))
          ((set #i 19)(if (in #avail-lang #i) ("%s (%s)" (get-os4-lang #i) (get-os3-lang #i)) (#nolang-fmt @result)))
          ((set #i 20)(if (in #avail-lang #i) ("%s (%s)" (get-os4-lang #i) (get-os3-lang #i)) (#nolang-fmt @result)))
          ((set #i 21)(if (in #avail-lang #i) ("%s (%s)" (get-os4-lang #i) (get-os3-lang #i)) (#nolang-fmt @result)))
          ((set #i 22)(if (in #avail-lang #i) ("%s (%s)" (get-os4-lang #i) (get-os3-lang #i)) (#nolang-fmt @result)))
          ((set #i 23)(if (in #avail-lang #i) ("%s (%s)" (get-os4-lang #i) (get-os3-lang #i)) (#nolang-fmt @result)))
          ((set #i 24)(if (in #avail-lang #i) ("%s (%s)" (get-os4-lang #i) (get-os3-lang #i)) (#nolang-fmt @result)))
      )
      (default #default-lang) ) )

  (set #catdir (tackon #localedir "Catalogs"))
  (if (not (exists #catdir) ) (makedir #catdir) )

  (set #catalog 1)
  (until (> #catalog (- #languages-count 1))
    (p_copy-catalog)
    (set #catalog (+ #catalog 1) )
  ) )

;------------------------------------------------------------------------
; We can't handle this script without Installer 42.9 or better!
(if (< @installer-version 2752521)
  (
    ; Big problem!
    (message #wrongversion)
    (exit (quiet))
  )
)

(welcome #welcome)

;------------------------------------------------------------------------
; Let user select which OS version to install
(set #os-choice
  (askchoice
    (prompt #os-selection-prompt)
    (help #os-selection-help)
    (choices
      "AmigaOS 3.x"
      "AmigaOS 4.x"
      "MorphOS"
    )
    (default (if #os4 1 (if #mos 2 0)))
  )
)

; Set OS flags based on user choice
(set #os4 (if (= #os-choice 1) 1 0))
(set #mos (if (= #os-choice 2) 1 0))

(complete 20)

; First find the AmigaGPT base
(set #amigagptdirbase (GETPATH @app-name @default-dest TRUE #amigagptdestdir-prompt #amigagptdestdir-help))

; We have to create a drawer "AmigaGPT" there!
(set #amigagptdir (tackon #amigagptdirbase @app-name))

(set #isupdate FALSE)
(if (not (exists #amigagptdir))
  (
    ; For a new setup, we should leave some space!
    (if (< (getdiskspace #amigagptdirbase) 4000000)
        (abort (#no-diskspace #amigagptdirbase 4000000))
    )

    ; Just to be sure.
    (makedir #amigagptdir (infos))
  )
  (
    ; This must be an update!
    (set #isupdate TRUE)
  )
)

; Ok, we found the correct destination now
(set @default-dest #amigagptdir)

; Check for catalogs and install them if available
(if (exists "catalogs")
  (
    (set #localedir  (GETPATH "" "LOCALE:" TRUE (#destdir-prompt #localedir-info) #destdir-help))
    (p_install-catalogs)
  )
)

(complete 30)

;------------------------------------------------------------------------
; Copy the appropriate version of AmigaGPT based on user selection
(working (#installing @app-name))

; Copy the appropriate executable based on OS choice
(if (= #os-choice 0)
  (
    (copyfiles 
      (source "AmigaGPT/AmigaGPT_OS3")
      (dest @default-dest)
      (optional "force" "askuser")
    )
    (copyfiles 
      (source "AmigaGPT/AmigaGPT_OS3.info")
      (dest @default-dest)
      (optional "force" "askuser")
    )
    (copyfiles 
      (source "icons/AmigaGPT_Drawer_OS3.info")
      (dest #amigagptdirbase)
      (newname (cat @app-name ".info"))
      (optional "force" "askuser")
    )
    (complete 70)
    ;------------------------------------------------------------------------
    ; Copy devs directory
    (working (#installing "Device files"))
    (copyfiles 
      (source "AmigaGPT")
      (dest @default-dest)
      (pattern "devs")
      (optional "force" "askuser")
    )
    (copyfiles 
      (source "AmigaGPT/devs.info")
      (dest @default-dest)
      (optional "force" "askuser")
    )
  )
)

(if (= #os-choice 1)
  (
    (copyfiles 
      (source "AmigaGPT/AmigaGPT_OS4")
      (dest @default-dest)
      (optional "force" "askuser")
    )
    (copyfiles 
      (source "AmigaGPT/AmigaGPT_OS4.info")
      (dest @default-dest)
      (optional "force" "askuser")
    )
    (copyfiles 
      (source "icons/AmigaGPT_Drawer_OS4.info")
      (dest #amigagptdirbase)
      (newname (cat @app-name ".info"))
      (optional "force" "askuser")
    )
  )
)

(if (= #os-choice 2)
  (
    (copyfiles 
      (source "AmigaGPT/AmigaGPT_MorphOS")
      (dest @default-dest)
      (optional "force" "askuser")
    )
    (copyfiles 
      (source "AmigaGPT/AmigaGPT_MorphOS.info")
      (dest @default-dest)
      (optional "force" "askuser")
    )
    (copyfiles 
      (source "icons/AmigaGPT_Drawer_OS4.info") ; Use OS4 drawer icon for MorphOS
      (dest #amigagptdirbase)
      (newname (cat @app-name ".info"))
      (optional "force" "askuser")
    )
  )
)

(complete 50)

;------------------------------------------------------------------------
; Copy documentation
(working (#installing "Documentation"))
(copyfiles 
  (source "AmigaGPT.guide")
  (dest @default-dest)
  (optional "force" "askuser")
)
(copyfiles 
  (source "AmigaGPT.guide.info")
  (dest @default-dest)
  (optional "force" "askuser")
)
(copyfiles 
  (source "AmigaGPT.readme")
  (dest @default-dest)
  (optional "force" "askuser")
)
(copyfiles 
  (source "AmigaGPT.readme.info")
  (dest @default-dest)
  (optional "force" "askuser")
)

(complete 100)

(CLEANUP)
(exit)
