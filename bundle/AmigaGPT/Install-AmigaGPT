; $VER: Install-AmigaGPT 2.3.1 (29.03.2025)
;------------------------------------------------------------------------
(set @app-name "AmigaGPT")
(set @default-dest "SYS:")

(set #installer-ver (/ @installer-version 65536))
(set #propchoices (if (< #installer-ver 42) "" "\x1b[2p"))
(set #cpu (database "cpu") )
(set #fpu (database "fpu") )
(set #osver (/ (getversion "exec.library" (resident)) 65536))
(set #arosver ( / (getversion "aros.library" (resident)) 65536))
(set #os4 0)
(set #mos 0)

; Detect CPU type
(if (and (<> #cpu "68000") (<> #cpu "68010") )
  (set #cpu-install 1) )
(if (and (<> "NOFPU" #fpu) (= #cpu-install 1) )
  (set #cpu-install 2) )
(if (and (<> "NOFPU" #fpu) (= "68040" #cpu) )
  (set #cpu-install 3) )
(if (exists "libs:68060.library")
  (set #cpu-install 4) )

; Detect OS type
(if (<> (getversion "MorphOS" (resident)) 0)
  ( (set #mos 1)
    (set #cpu-install 4) )
  (if (>= #osver 52)
    ( (set #os4 1)
      (set #cpu-install 2) ) ) )

(if (and #os4 (= #installer-ver 53) )
  (set #installer-ver 43) ) ; Workaround for broken Installer 53.1-53.7

(set #muidir (if (= #mos 1) "SYS:Classes/MUI" "MUI:Libs/MUI") )

; Get AmigaGPT version
(set #app-version ((run "version AmigaGPT/AmigaGPT_OS3 > ENV:NEW_AMIGAGPT_VERSION")(getenv "NEW_AMIGAGPT_VERSION")))
(set #app-version-len (strlen #app-version))
(set #app-version (substr #app-version (+ (strlen @app-name) 1) (- (- #app-version-len 2) (strlen @app-name))))

; Get user language
(if (= (exists "ENV:Language") 1)
  (set @language (getenv "Language") ) )

; Text strings
(set #welcome 
    ("Welcome to the %s installer!\nThis will install %s %s on your system.\n\nAmigaGPT is a versatile ChatGPT client for Amiga systems that brings the capabilities of OpenAI's GPT to your Amiga." @app-name @app-name #app-version)
)

(set #wrongversion
(cat "You have an old version of the program 'Installer' "
     "on your Amiga!\n\nThe installation procedure needs at least Installer 42.9.\n\n"
     "Please check your configuration!")
)

(set #destdir-prompt "Please select the drawer where %s should be installed.\n")
(set #destdir-help "Typically, 'Work:' is selected as destination.")
(set #amigagptdestdir-prompt ("Please select the drawer where %s should be installed. A new drawer \"%s\" will be created if it doesn't exist.\n" @app-name @app-name))
(set #amigagptdestdir-help "Typically, 'Work:' is selected as destination.")
(set #upgrade-message "An existing installation of AmigaGPT%s was found in this directory.\n\nThis installation will be replaced.\n\nWarning: AmigaGPT now only allows a single platform for each directory it's installed into.\n\nIf you have installed AmigaGPT for other platforms in this directory, they will get deleted!\n\nDo you want to continue?")
(set #localedir-prompt "Please select the drawer where locale catalogs should be installed.\n")
(set #localedir-help "This should be set to the locale directory located at the root of your system.")
(set #readme-prompt "Please select the drawer where readme should be installed.\n")
(set #readme-help "This can be placed anywhere you like.")
(set #guide-prompt "Please select the drawer where the guide should be installed.")
(set #guide-help "This should be located in the same directory as AmigaGPT if you want to be able to read it from the help menu.")
(set #installing "Installing %s...")
(set #startup-prompt "Some lines need to be added to S:User-Startup for %s:\n\n%s")
(set #startup-help "AmigaGPT won't work correctly without these lines!")
(set #os-selection-prompt "Please select which version of AmigaGPT you want to install:")
(set #os-selection-help "Choose the version that matches your Amiga system.")
(set #languages-prompt "Please select which languages you want to install:")
(set #languages-help "Choose the languages you want to use with AmigaGPT.")

;------------------------------------------------------------------------
; Helper functions for language names
;------------------------------------------------------------------------

(procedure get-os3-lang #index
  (if (= #index 0) (set @result "english") (
  if (= #index 1) (set @result "bosanski") (
  if (= #index 2) (set @result "czech") (
  if (= #index 3) (set @result "dansk") (
  if (= #index 4) (set @result "deutsch") (
  if (= #index 5) (set @result "english_british") (
  if (= #index 6) (set @result "español") (
  if (= #index 7) (set @result "français") (
  if (= #index 8) (set @result "greek") (
  if (= #index 9) (set @result "hrvatski") (
  if (= #index 10) (set @result "italiano") (
  if (= #index 11) (set @result "magyar") (
  if (= #index 12) (set @result "nederlands") (
  if (= #index 13) (set @result "norsk") (
  if (= #index 14) (set @result "polski") (
  if (= #index 15) (set @result "português") (
  if (= #index 16) (set @result "russian") (
  if (= #index 17) (set @result "slovak") (
  if (= #index 18) (set @result "slovensko") (
  if (= #index 19) (set @result "srpski") (
  if (= #index 20) (set @result "suomi") (
  if (= #index 21) (set @result "svenska") (
  if (= #index 22) (set @result "türkçe") (
  (set @result "unknown")
  ))))))))))))))))))))))))
  )

(procedure get-os4-lang #index
  (if (= #index 0) (set @result "english") (
  if (= #index 1) (set @result "bosnian") (
  if (= #index 2) (set @result "czech") (
  if (= #index 3) (set @result "danish") (
  if (= #index 4) (set @result "german") (
  if (= #index 5) (set @result "english-british") (
  if (= #index 6) (set @result "spanish") (
  if (= #index 7) (set @result "french") (
  if (= #index 8) (set @result "greek") (
  if (= #index 9) (set @result "croatian") (
  if (= #index 10) (set @result "italian") (
  if (= #index 11) (set @result "hungarian") (
  if (= #index 12) (set @result "dutch") (
  if (= #index 13) (set @result "norwegian") (
  if (= #index 14) (set @result "polish") (
  if (= #index 15) (set @result "portuguese") (
  if (= #index 16) (set @result "russian") (
  if (= #index 17) (set @result "slovak") (
  if (= #index 18) (set @result "slovenian") (
  if (= #index 19) (set @result "serbian") (
  if (= #index 20) (set @result "finnish") (
  if (= #index 21) (set @result "swedish") (
  if (= #index 22) (set @result "turkish") (
  (set @result "unknown")
  ))))))))))))))))))))))))
)

; Set the total number of languages
(set #languages-count 23)

;------------------------------------------------------------------------
; Catalog installation procedures
;------------------------------------------------------------------------

(procedure p_copy-catalog
  (if (in #languages #catalog)
    ( 
      (get-os3-lang #catalog)
      (set #lang-os3 @result)
      (get-os4-lang #catalog)
      (set #lang-os4 @result)
      
      (set #dest-lang (tackon (tackon #localedir "Catalogs") (if #os4 #lang-os4 #lang-os3) ) )
      (if (not (exists #dest-lang) ) (makedir #dest-lang) )
      (set #source (tackon "catalogs" #lang-os4) )
      (if (and (and (< #cpu-install 5) (or (>= #osver 46) (>= #arosver 40) ) ) (exists (tackon #source "iso") ) )
        (set #source (tackon #source "iso") ) )
      (copyfiles
        (source #source)
        (dest #dest-lang)
        (pattern "#?.catalog")
        (files) ) 
    ) 
  )
)

(procedure p_install-catalogs
  (set #avail-lang 1) ; English (built-in)
  (foreach "catalogs" "#?"
    (set #i 0)
    (while (< #i #languages-count)
      (get-os4-lang #i)
      (if (= @each-name @result)
        (
          (set #avail-lang (bitor #avail-lang (shiftleft 1 #i)))
          (set #i #languages-count) ; Exit the loop
        )
        (set #i (+ #i 1))
      )
    )
  )

  (set #default-lang 1) ; English
  (set #i 0)
  (while (< #i #languages-count)
    (get-os3-lang #i)
    (if (= @language @result)
      (
        (if (in #avail-lang #i)
          (set #default-lang (bitor #default-lang (shiftleft 1 #i)))
        )
        (set #i #languages-count) ; Exit the loop
      )
      (set #i (+ #i 1))
    )
  )

  (if (< #installer-ver 42)
    (set #nolang-fmt "(%s)")
    (set #nolang-fmt "") )
  ; Now use the individual choice variables
  (set #languages
    (askoptions
      (prompt #languages-prompt)
      (help #languages-help)
      (choices
          (cat #propchoices "English (built-in)")
	        ((set #i 1)(if (in #avail-lang #i) ("%s (%s)" (get-os4-lang #i) (get-os3-lang #i)) (#nolang-fmt @result)))
          ((set #i 2)(if (in #avail-lang #i) ("%s (%s)" (get-os4-lang #i) (get-os3-lang #i)) (#nolang-fmt @result)))
          ((set #i 3)(if (in #avail-lang #i) ("%s (%s)" (get-os4-lang #i) (get-os3-lang #i)) (#nolang-fmt @result)))
          ((set #i 4)(if (in #avail-lang #i) ("%s (%s)" (get-os4-lang #i) (get-os3-lang #i)) (#nolang-fmt @result)))
          ((set #i 5)(if (in #avail-lang #i) ("%s (%s)" (get-os4-lang #i) (get-os3-lang #i)) (#nolang-fmt @result)))
          ((set #i 6)(if (in #avail-lang #i) ("%s (%s)" (get-os4-lang #i) (get-os3-lang #i)) (#nolang-fmt @result)))
          ((set #i 7)(if (in #avail-lang #i) ("%s (%s)" (get-os4-lang #i) (get-os3-lang #i)) (#nolang-fmt @result)))
          ((set #i 8)(if (in #avail-lang #i) ("%s (%s)" (get-os4-lang #i) (get-os3-lang #i)) (#nolang-fmt @result)))
          ((set #i 9)(if (in #avail-lang #i) ("%s (%s)" (get-os4-lang #i) (get-os3-lang #i)) (#nolang-fmt @result)))
          ((set #i 10)(if (in #avail-lang #i) ("%s (%s)" (get-os4-lang #i) (get-os3-lang #i)) (#nolang-fmt @result)))
          ((set #i 11)(if (in #avail-lang #i) ("%s (%s)" (get-os4-lang #i) (get-os3-lang #i)) (#nolang-fmt @result)))
          ((set #i 12)(if (in #avail-lang #i) ("%s (%s)" (get-os4-lang #i) (get-os3-lang #i)) (#nolang-fmt @result))) 
          ((set #i 13)(if (in #avail-lang #i) ("%s (%s)" (get-os4-lang #i) (get-os3-lang #i)) (#nolang-fmt @result)))
          ((set #i 14)(if (in #avail-lang #i) ("%s (%s)" (get-os4-lang #i) (get-os3-lang #i)) (#nolang-fmt @result)))
          ((set #i 15)(if (in #avail-lang #i) ("%s (%s)" (get-os4-lang #i) (get-os3-lang #i)) (#nolang-fmt @result)))
          ((set #i 16)(if (in #avail-lang #i) ("%s (%s)" (get-os4-lang #i) (get-os3-lang #i)) (#nolang-fmt @result)))
          ((set #i 17)(if (in #avail-lang #i) ("%s (%s)" (get-os4-lang #i) (get-os3-lang #i)) (#nolang-fmt @result)))
          ((set #i 18)(if (in #avail-lang #i) ("%s (%s)" (get-os4-lang #i) (get-os3-lang #i)) (#nolang-fmt @result)))
          ((set #i 19)(if (in #avail-lang #i) ("%s (%s)" (get-os4-lang #i) (get-os3-lang #i)) (#nolang-fmt @result)))
          ((set #i 20)(if (in #avail-lang #i) ("%s (%s)" (get-os4-lang #i) (get-os3-lang #i)) (#nolang-fmt @result)))
          ((set #i 21)(if (in #avail-lang #i) ("%s (%s)" (get-os4-lang #i) (get-os3-lang #i)) (#nolang-fmt @result)))
          ((set #i 22)(if (in #avail-lang #i) ("%s (%s)" (get-os4-lang #i) (get-os3-lang #i)) (#nolang-fmt @result)))
      )
      (default #default-lang) ) )

  (set #catdir (tackon #localedir "Catalogs"))
  (if (not (exists #catdir) ) (makedir #catdir) )

  (set #catalog 1)
  (until (> #catalog (- #languages-count 1))
    (p_copy-catalog)
    (set #catalog (+ #catalog 1) )
  ) )

;------------------------------------------------------------------------
; We can't handle this script without Installer 42.9 or better!
(if (< @installer-version 2752521)
  (
    ; Big problem!
    (message #wrongversion)
    (exit (quiet))
  )
)

(welcome #welcome)

;------------------------------------------------------------------------
; Let user select which OS version to install
(set #os-choice
  (askchoice
    (prompt #os-selection-prompt)
    (help #os-selection-help)
    (choices
      "AmigaOS 3.x"
      "AmigaOS 4.x"
      "MorphOS"
    )
    (default (if #os4 1 (if #mos 2 0)))
  )
)

; Set OS flags based on user choice
(set #os4 (if (= #os-choice 1) 1 0))
(set #mos (if (= #os-choice 2) 1 0))

(complete 20)

; First find the AmigaGPT base
(set #amigagptdirbase (expandpath
                    (askdir
                        (prompt #amigagptdestdir-prompt)
                        (help #amigagptdestdir-help)
                        (default @default-dest)
                    ))

)

; We have to create a drawer "AmigaGPT" there!
(set #amigagptdir (tackon #amigagptdirbase @app-name))

(if (not (exists #amigagptdir))
  (
    (makedir #amigagptdir (infos))
  )
  (
    (if (exists (tackon #amigagptdir "AmigaGPT"))
      (
        (set #old-version-check-status (run ("version %s" (tackon #amigagptdir "AmigaGPT"))))
        (set #old-app-version ((run ("version %s > ENV:OLD_AMIGAGPT_VERSION" (tackon #amigagptdir "AmigaGPT")))(getenv "OLD_AMIGAGPT_VERSION")))
        (set #old-app-version-len (strlen #old-app-version))
        (set #old-app-version (substr #old-app-version (+ (strlen @app-name) 1) (- (- #old-app-version-len 2) (strlen @app-name))))
        (message (#upgrade-message (if (= #old-version-check-status 20) "" (" (%s)" #old-app-version))))
      )
    )

    (if (or (exists (tackon #amigagptdir "AmigaGPT_OS4")) (exists (tackon #amigagptdir "AmigaGPT_MorphOS")))
      (delete (tackon #amigagptdir "AmigaGPT_OS4") (all) (optional "force"))
      (delete (tackon #amigagptdir "AmigaGPT_MorphOS") (all) (optional "force"))
    )
  )
)

; Ok, we found the correct destination now
(set @default-dest #amigagptdir)

(set #localedir 
  (if (= @user-level 2)
    (expandpath
      (askdir
        (prompt #localedir-prompt)
        (help #localedir-help)
        (default "LOCALE:")
      )
    )
    "LOCALE:"
  )
)

(p_install-catalogs)

(complete 30)

;------------------------------------------------------------------------
; Copy the appropriate version of AmigaGPT based on user selection
(working (#installing @app-name))

; Copy the appropriate executable based on OS choice
(if (= #os-choice 0)
  (
    (copyfiles 
      (source "AmigaGPT/AmigaGPT_OS3")
      (dest @default-dest)
      (newname @app-name)
      (infos)
      (optional "force" "askuser")
    )
    (copyfiles 
      (source "icons/AmigaGPT_Drawer_OS3.info")
      (dest #amigagptdirbase)
      (newname (cat @app-name ".info"))
      (noposition)
      (optional "force" "askuser")
    )
    (complete 70)
    ;------------------------------------------------------------------------
    ; Copy devs directory if it doesn't exist
    (if (not (exists (tackon @default-dest "devs") ) )
      (
        (working (#installing "Device files"))
        (copyfiles 
          (source "AmigaGPT")
          (dest @default-dest)
          (pattern "devs")
          (infos)
        )
      )
    )
  )
)

(if (= #os-choice 1)
  (
    (copyfiles 
      (source "AmigaGPT/AmigaGPT_OS4")
      (dest @default-dest)
      (newname @app-name)
      (infos)
      (optional "force" "askuser")
    )
    (copyfiles 
      (source "icons/AmigaGPT_Drawer_OS4.info")
      (dest #amigagptdirbase)
      (newname (cat @app-name ".info"))
      (noposition)
      (optional "force" "askuser")
    )
  )
)
(if (= #os-choice 2)
  (
    (copyfiles 
      (source "AmigaGPT/AmigaGPT_MorphOS")
      (dest @default-dest)
      (newname @app-name)
      (infos)
      (optional "force" "askuser")
    )
    (copyfiles 
      (source "icons/AmigaGPT_Drawer_OS4.info") ; Use OS4 drawer icon for MorphOS
      (dest #amigagptdirbase)
      (newname (cat @app-name ".info"))
      (noposition)
      (optional "force" "askuser")
    )
  )
)

(complete 50)

;------------------------------------------------------------------------
; Copy the rexx scripts
(if (not (exists (tackon @default-dest "rexx") ) )
      (
        (working (#installing "ARexx scripts"))
        (copyfiles 
          (source "AmigaGPT")
          (dest @default-dest)
          (pattern "rexx")
          (infos)
        )
      )
    )

(complete 80)

;------------------------------------------------------------------------
; Copy documentation
(working (#installing "Documentation"))
(copyfiles 
  (prompt #guide-prompt)
  (help #guide-help)
  (source "AmigaGPT.guide")
  (dest @default-dest)
  (infos)
)

(complete 90)

(set #readmedir 
  (if (> @user-level 0)
    (expandpath
      (askdir
        (prompt #readme-prompt)
        (help #readme-help)
        (default @default-dest)
      )
    )
    @default-dest
  )
)

(copyfiles 
  (source "AmigaGPT.readme")
  (dest #readmedir)
  (infos)
)

(complete 100)
(exit)
